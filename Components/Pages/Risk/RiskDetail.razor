@page "/risk/{Id:int}"
@using CyberRiskTracker.Models
@using CyberRiskTracker.Services
@inject NavigationManager NavigationManager
@inject RiskService RiskSvc
@rendermode InteractiveServer

@if (risk != null)
{

    <EditForm Enhance Model="risk" FormName="UploadImage" OnValidSubmit="@UploadImageAsync" method="post">
        <div class="mb-3">
            <label for="imgInput" class="form-label">Select Image  </label>
            <InputFile OnChange="@OnInputFileChange" />
        </div>
        <button type="submit" class="btn btn-success">
            <i class="bi bi-save"></i> Save
        </button>
    </EditForm>


    <div class="container mt-4">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5>Edit Risk: @risk.Title</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="titleInput" class="form-label">Title</label>
                    <input id="titleInput" class="form-control" @bind="risk.Title" placeholder="Enter title" />
                </div>

                <div class="mb-3">
                    <label for="descInput" class="form-label">Description</label>
                    <textarea id="descInput" class="form-control" @bind="risk.Description" rows="4" placeholder="Enter description"></textarea>
                </div>

                <div class="mb-3">
                    <label for="descInput" class="form-label">HowItWorks </label>
                    <textarea id="descInput" class="form-control" @bind="risk.HowItWorks" rows="4" placeholder="Enter How It Works "></textarea>
                </div>
                <div class="mb-3">
                    <label for="descInput" class="form-label">Additional Information </label>
                    <textarea id="descInput" class="form-control" @bind="risk.AdditionalInformation" rows="4" placeholder="Enter Additional Information "></textarea>
                </div>
                <div class="mb-3">
                    <label for="imgInput" class="form-label">Image URL</label>
                    <input id="imgInput" class="form-control" @bind="risk.ImageUrl" placeholder="https://..." />
                </div>


                @if (!string.IsNullOrWhiteSpace(risk.ImageUrl))
                {
                    <div class="mb-3">
                        <label class="form-label">Preview</label><br />
                        <img src="@risk.ImageFullPath" alt="Risk preview" class="img-thumbnail" style="max-width: 150px;" /> |
                        <img src="@risk.ImageUrl" alt="Risk preview" class="img-thumbnail" style="max-width: 150px;" />
                    </div>
                }
                <button class="btn btn-secondary" @onclick="Cancel">
                    <i class="bi bg-info"></i> Cancel
                </button>
                <button class="btn btn-success" @onclick="Save">
                    <i class="bi bi-save"></i> Save Changes
                </button>
            </div>
        </div>
    </div>
}
@code {
    [Parameter] public int Id { get; set; }
    private RiskItem? risk;
    private bool imageUploaded;
    private IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        risk = await RiskSvc.GetRiskByIdAsync(Id);
    }

    async Task Save()
    {
        if (risk != null)
        {
            // await UploadImageAsync();
            await RiskSvc.SaveRiskAsync(risk);
            NavigationManager.NavigateTo("/risks");
        }
    }

    private void Cancel(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("/risks");
    }
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        StateHasChanged();
    }

    private async Task UploadImageAsync()
    {
        if (risk == null) return;
        if (selectedFile != null)
        {
            var file = selectedFile;
              Stream stream = file.OpenReadStream();
              MemoryStream ms = new();
            await stream.CopyToAsync(ms);
            stream.Close();
            risk.ImageName = file.Name;
            risk.ImageContent = ms.ToArray();
         await RiskSvc.UploadRiskImageAsync(risk);
            imageUploaded = true;
        }
    }

}

